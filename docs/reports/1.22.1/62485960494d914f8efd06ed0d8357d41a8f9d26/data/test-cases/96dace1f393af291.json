{
  "uid" : "96dace1f393af291",
  "name" : "test_reward_amount",
  "fullName" : "cardano_node_tests.tests.test_staking.TestRewards#test_reward_amount",
  "historyId" : "4d70b99d6f55a37d1c661b1bebebbd97",
  "time" : {
    "start" : 1604677703406,
    "stop" : 1604678259535,
    "duration" : 556129
  },
  "description" : "Check that the stake address and pool owner are receiving rewards.",
  "descriptionHtml" : "<p>Check that the stake address and pool owner are receiving rewards.</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'b0f92429794301d9eed2facb98e7cade61be4475230be7779a2091a8' not in ['204a569e9db11b9f3aa79a8f70b2838f1a8285786cc2ca9ee850b8f6', '37037a8e84878d578ced734faf2391c1aea111bacfbcd2d5cdd7bef1...2429794301d9eed2facb98e7cade61be4475230be7779a2091a8', 'd956489c217e9ca8dc8a6b4384fed84bfc24a088f918a9649e41f222', ...]",
  "statusTrace" : "self = <cardano_node_tests.tests.test_staking.TestRewards object at 0x7f10ada01f10>, cluster_manager = <cardano_node_tests.utils.parallel_run.ClusterManager object at 0x7f10ad9d6e20>, cluster_use_pool1 = <cardano_node_tests.utils.clusterlib.ClusterLib object at 0x7f10ada019d0>\n\n    @allure.link(helpers.get_vcs_link())\n    def test_reward_amount(  # noqa: C901\n        self,\n        cluster_manager: parallel_run.ClusterManager,\n        cluster_use_pool1: clusterlib.ClusterLib,\n    ):\n        \"\"\"Check that the stake address and pool owner are receiving rewards.\"\"\"\n        # pylint: disable=too-many-statements,too-many-locals\n        pool_name = \"node-pool1\"\n        cluster = cluster_use_pool1\n    \n        temp_template = helpers.get_func_name()\n        pool_rec = cluster_manager.cache.addrs_data[pool_name]\n        pool_owner = clusterlib.PoolUser(payment=pool_rec[\"payment\"], stake=pool_rec[\"stake\"])\n        pool_reward = clusterlib.PoolUser(payment=pool_rec[\"payment\"], stake=pool_rec[\"reward\"])\n        pool_reward_addr_dec = helpers.decode_bech32(pool_reward.stake.address)[2:]\n        pool_stake_addr_dec = helpers.decode_bech32(pool_owner.stake.address)[2:]\n    \n        sleep_time = clusterlib_utils.time_to_next_epoch_start(cluster) - 8\n        if sleep_time > 0:\n            time.sleep(sleep_time)\n    \n        init_epoch = cluster.get_last_block_epoch()\n        user_rewards = [(init_epoch, 0, 0)]\n        owner_rewards = [\n            (\n                init_epoch,\n                cluster.get_stake_addr_info(pool_reward.stake.address).reward_account_balance,\n                0,\n            )\n        ]\n    \n        # save ledger state\n        clusterlib_utils.save_ledger_state(\n            cluster_obj=cluster, name_template=f\"{temp_template}_{init_epoch}\"\n        )\n    \n        # submit registration certificate and delegate to pool\n        pool_user = _delegate_stake_addr(\n            cluster_obj=cluster,\n            addrs_data=cluster_manager.cache.addrs_data,\n            temp_template=temp_template,\n            pool_name=pool_name,\n            check_delegation=False,\n        )\n    \n        user_stake_addr_dec = helpers.decode_bech32(pool_user.stake.address)[2:]\n        user_payment_balance = cluster.get_address_balance(pool_user.payment.address)\n    \n        es_snapshots = {}\n        rs_records = {}\n        LOGGER.info(\"Checking rewards for 9 epochs.\")\n        for __ in range(9):\n            # reward balances in previous epoch\n            prev_user_epoch, prev_user_reward, __ = user_rewards[-1]\n            (\n                prev_owner_epoch,\n                prev_owner_reward,\n                __,  # prev_abs_owner_reward\n            ) = owner_rewards[-1]\n    \n            # wait for new epoch\n            if cluster.get_last_block_epoch() == prev_owner_epoch:\n                cluster.wait_for_new_epoch()\n    \n            # sleep till the end of epoch\n            sleep_time = clusterlib_utils.time_to_next_epoch_start(cluster) - 5\n            if sleep_time > 0:\n                time.sleep(sleep_time)\n    \n            this_epoch = cluster.get_last_block_epoch()\n    \n            # current reward balances\n            user_reward = cluster.get_stake_addr_info(\n                pool_user.stake.address\n            ).reward_account_balance\n            owner_reward = cluster.get_stake_addr_info(\n                pool_reward.stake.address\n            ).reward_account_balance\n    \n            # absolute reward amounts received this epoch\n            abs_user_reward = (\n                user_reward - prev_user_reward if this_epoch == prev_user_epoch + 1 else 0\n            )\n            abs_owner_reward = (\n                owner_reward - prev_owner_reward if this_epoch == prev_owner_epoch + 1 else 0\n            )\n    \n            # store collected rewards info\n            user_rewards.append(\n                (\n                    this_epoch,\n                    user_reward,\n                    abs_user_reward,\n                )\n            )\n            owner_rewards.append(\n                (\n                    this_epoch,\n                    owner_reward,\n                    abs_owner_reward,\n                )\n            )\n    \n            # save ledger state\n            clusterlib_utils.save_ledger_state(\n                cluster_obj=cluster, name_template=f\"{temp_template}_{this_epoch}\"\n            )\n            ledger_state: dict = cluster.get_ledger_state()\n            es_snapshot: dict = ledger_state[\"nesEs\"][\"esSnapshots\"]\n            es_snapshots[this_epoch] = es_snapshot\n            rs_record: list = ledger_state[\"nesRu\"][\"rs\"]\n            rs_records[this_epoch] = rs_record\n    \n            # Make sure reward amount corresponds with ledger state.\n            # Reward is received on epoch boundary, so check reward with record for previous epoch.\n            if abs_user_reward:\n                assert abs_user_reward == _get_val_for_key_hash(\n                    user_stake_addr_dec, rs_records[this_epoch - 1]\n                )\n            if abs_owner_reward:\n                assert abs_owner_reward == _get_val_for_key_hash(\n                    pool_reward_addr_dec, rs_records[this_epoch - 1]\n                )\n    \n            _pstake_mark = _get_key_hashes(es_snapshot[\"_pstakeMark\"][\"_stake\"])\n            _pstake_set = _get_key_hashes(es_snapshot[\"_pstakeSet\"][\"_stake\"])\n            _pstake_go = _get_key_hashes(es_snapshot[\"_pstakeGo\"][\"_stake\"])\n    \n            if this_epoch == init_epoch + 2:\n                assert pool_stake_addr_dec in _pstake_mark\n                assert pool_stake_addr_dec in _pstake_set\n>               assert pool_stake_addr_dec not in _pstake_go\nE               AssertionError: assert 'b0f92429794301d9eed2facb98e7cade61be4475230be7779a2091a8' not in ['204a569e9db11b9f3aa79a8f70b2838f1a8285786cc2ca9ee850b8f6', '37037a8e84878d578ced734faf2391c1aea111bacfbcd2d5cdd7bef1...2429794301d9eed2facb98e7cade61be4475230be7779a2091a8', 'd956489c217e9ca8dc8a6b4384fed84bfc24a088f918a9649e41f222', ...]\n\n/home/martink/Source/repos/cardano-node-tests2/cardano_node_tests/tests/test_staking.py:743: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cluster_use_pool1",
    "time" : {
      "start" : 1604677703405,
      "stop" : 1604677703406,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1604676882862,
      "stop" : 1604676882862,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "temp_dir",
    "time" : {
      "start" : 1604677693310,
      "stop" : 1604677693311,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1604676882862,
      "stop" : 1604676882862,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1604676882863,
      "stop" : 1604676882863,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1604676882863,
      "stop" : 1604676882863,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_cleanup",
    "time" : {
      "start" : 1604676882863,
      "stop" : 1604676882863,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1604677703405,
      "stop" : 1604677703405,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Check that the stake address and pool owner are receiving rewards.",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'b0f92429794301d9eed2facb98e7cade61be4475230be7779a2091a8' not in ['204a569e9db11b9f3aa79a8f70b2838f1a8285786cc2ca9ee850b8f6', '37037a8e84878d578ced734faf2391c1aea111bacfbcd2d5cdd7bef1...2429794301d9eed2facb98e7cade61be4475230be7779a2091a8', 'd956489c217e9ca8dc8a6b4384fed84bfc24a088f918a9649e41f222', ...]",
    "statusTrace" : "self = <cardano_node_tests.tests.test_staking.TestRewards object at 0x7f10ada01f10>, cluster_manager = <cardano_node_tests.utils.parallel_run.ClusterManager object at 0x7f10ad9d6e20>, cluster_use_pool1 = <cardano_node_tests.utils.clusterlib.ClusterLib object at 0x7f10ada019d0>\n\n    @allure.link(helpers.get_vcs_link())\n    def test_reward_amount(  # noqa: C901\n        self,\n        cluster_manager: parallel_run.ClusterManager,\n        cluster_use_pool1: clusterlib.ClusterLib,\n    ):\n        \"\"\"Check that the stake address and pool owner are receiving rewards.\"\"\"\n        # pylint: disable=too-many-statements,too-many-locals\n        pool_name = \"node-pool1\"\n        cluster = cluster_use_pool1\n    \n        temp_template = helpers.get_func_name()\n        pool_rec = cluster_manager.cache.addrs_data[pool_name]\n        pool_owner = clusterlib.PoolUser(payment=pool_rec[\"payment\"], stake=pool_rec[\"stake\"])\n        pool_reward = clusterlib.PoolUser(payment=pool_rec[\"payment\"], stake=pool_rec[\"reward\"])\n        pool_reward_addr_dec = helpers.decode_bech32(pool_reward.stake.address)[2:]\n        pool_stake_addr_dec = helpers.decode_bech32(pool_owner.stake.address)[2:]\n    \n        sleep_time = clusterlib_utils.time_to_next_epoch_start(cluster) - 8\n        if sleep_time > 0:\n            time.sleep(sleep_time)\n    \n        init_epoch = cluster.get_last_block_epoch()\n        user_rewards = [(init_epoch, 0, 0)]\n        owner_rewards = [\n            (\n                init_epoch,\n                cluster.get_stake_addr_info(pool_reward.stake.address).reward_account_balance,\n                0,\n            )\n        ]\n    \n        # save ledger state\n        clusterlib_utils.save_ledger_state(\n            cluster_obj=cluster, name_template=f\"{temp_template}_{init_epoch}\"\n        )\n    \n        # submit registration certificate and delegate to pool\n        pool_user = _delegate_stake_addr(\n            cluster_obj=cluster,\n            addrs_data=cluster_manager.cache.addrs_data,\n            temp_template=temp_template,\n            pool_name=pool_name,\n            check_delegation=False,\n        )\n    \n        user_stake_addr_dec = helpers.decode_bech32(pool_user.stake.address)[2:]\n        user_payment_balance = cluster.get_address_balance(pool_user.payment.address)\n    \n        es_snapshots = {}\n        rs_records = {}\n        LOGGER.info(\"Checking rewards for 9 epochs.\")\n        for __ in range(9):\n            # reward balances in previous epoch\n            prev_user_epoch, prev_user_reward, __ = user_rewards[-1]\n            (\n                prev_owner_epoch,\n                prev_owner_reward,\n                __,  # prev_abs_owner_reward\n            ) = owner_rewards[-1]\n    \n            # wait for new epoch\n            if cluster.get_last_block_epoch() == prev_owner_epoch:\n                cluster.wait_for_new_epoch()\n    \n            # sleep till the end of epoch\n            sleep_time = clusterlib_utils.time_to_next_epoch_start(cluster) - 5\n            if sleep_time > 0:\n                time.sleep(sleep_time)\n    \n            this_epoch = cluster.get_last_block_epoch()\n    \n            # current reward balances\n            user_reward = cluster.get_stake_addr_info(\n                pool_user.stake.address\n            ).reward_account_balance\n            owner_reward = cluster.get_stake_addr_info(\n                pool_reward.stake.address\n            ).reward_account_balance\n    \n            # absolute reward amounts received this epoch\n            abs_user_reward = (\n                user_reward - prev_user_reward if this_epoch == prev_user_epoch + 1 else 0\n            )\n            abs_owner_reward = (\n                owner_reward - prev_owner_reward if this_epoch == prev_owner_epoch + 1 else 0\n            )\n    \n            # store collected rewards info\n            user_rewards.append(\n                (\n                    this_epoch,\n                    user_reward,\n                    abs_user_reward,\n                )\n            )\n            owner_rewards.append(\n                (\n                    this_epoch,\n                    owner_reward,\n                    abs_owner_reward,\n                )\n            )\n    \n            # save ledger state\n            clusterlib_utils.save_ledger_state(\n                cluster_obj=cluster, name_template=f\"{temp_template}_{this_epoch}\"\n            )\n            ledger_state: dict = cluster.get_ledger_state()\n            es_snapshot: dict = ledger_state[\"nesEs\"][\"esSnapshots\"]\n            es_snapshots[this_epoch] = es_snapshot\n            rs_record: list = ledger_state[\"nesRu\"][\"rs\"]\n            rs_records[this_epoch] = rs_record\n    \n            # Make sure reward amount corresponds with ledger state.\n            # Reward is received on epoch boundary, so check reward with record for previous epoch.\n            if abs_user_reward:\n                assert abs_user_reward == _get_val_for_key_hash(\n                    user_stake_addr_dec, rs_records[this_epoch - 1]\n                )\n            if abs_owner_reward:\n                assert abs_owner_reward == _get_val_for_key_hash(\n                    pool_reward_addr_dec, rs_records[this_epoch - 1]\n                )\n    \n            _pstake_mark = _get_key_hashes(es_snapshot[\"_pstakeMark\"][\"_stake\"])\n            _pstake_set = _get_key_hashes(es_snapshot[\"_pstakeSet\"][\"_stake\"])\n            _pstake_go = _get_key_hashes(es_snapshot[\"_pstakeGo\"][\"_stake\"])\n    \n            if this_epoch == init_epoch + 2:\n                assert pool_stake_addr_dec in _pstake_mark\n                assert pool_stake_addr_dec in _pstake_set\n>               assert pool_stake_addr_dec not in _pstake_go\nE               AssertionError: assert 'b0f92429794301d9eed2facb98e7cade61be4475230be7779a2091a8' not in ['204a569e9db11b9f3aa79a8f70b2838f1a8285786cc2ca9ee850b8f6', '37037a8e84878d578ced734faf2391c1aea111bacfbcd2d5cdd7bef1...2429794301d9eed2facb98e7cade61be4475230be7779a2091a8', 'd956489c217e9ca8dc8a6b4384fed84bfc24a088f918a9649e41f222', ...]\n\n/home/martink/Source/repos/cardano-node-tests2/cardano_node_tests/tests/test_staking.py:743: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "85a85dfebbe4b171",
      "name" : "log",
      "source" : "85a85dfebbe4b171.txt",
      "type" : "text/plain",
      "size" : 97
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "temp_dir::0",
    "time" : {
      "start" : 1604694331247,
      "stop" : 1604694331247,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_cleanup::0",
    "time" : {
      "start" : 1604694331248,
      "stop" : 1604694331248,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1604678259568,
      "stop" : 1604678259569,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('temp_dir')"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_staking"
  }, {
    "name" : "subSuite",
    "value" : "TestRewards"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "372800-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_staking"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/2469c31cf82ae27863e9c0f51580385f1471d017/cardano_node_tests/tests/test_staking.py#L612",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/2469c31cf82ae27863e9c0f51580385f1471d017/cardano_node_tests/tests/test_staking.py#L612",
    "type" : "link"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('temp_dir')" ]
  },
  "source" : "96dace1f393af291.json",
  "parameterValues" : [ ]
}