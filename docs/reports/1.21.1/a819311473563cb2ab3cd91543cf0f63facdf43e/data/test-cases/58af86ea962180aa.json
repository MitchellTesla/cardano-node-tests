{
  "uid" : "58af86ea962180aa",
  "name" : "test_reregister_stake_pool",
  "fullName" : "cardano_node_tests.tests.test_pools.TestStakePool#test_reregister_stake_pool",
  "historyId" : "7330d607bbbb772ea1fa35243d39c565",
  "time" : {
    "start" : 1602007054890,
    "stop" : 1602008246057,
    "duration" : 1191167
  },
  "description" : "Reregister stake pool.",
  "descriptionHtml" : "<p>Reregister stake pool.</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed to reregister stake pool in time.",
  "statusTrace" : "self = <cardano_node_tests.tests.test_pools.TestStakePool object at 0x7f2b73769040>\ncluster_manager = <cardano_node_tests.utils.parallel_run.ClusterManager object at 0x7f2b736fee20>\ncluster = <cardano_node_tests.utils.clusterlib.ClusterLib object at 0x7f2b737401f0>\ntemp_dir = PosixPath('/home/martink/toolbox_tmp/pytest-of-martink/pytest-12/popen-gw4/test_pools_py0')\n\n    @allure.link(helpers.get_vcs_link())\n    def test_reregister_stake_pool(\n        self,\n        cluster_manager: parallel_run.ClusterManager,\n        cluster: clusterlib.ClusterLib,\n        temp_dir: Path,\n    ):\n        \"\"\"Reregister stake pool.\"\"\"\n        rand_str = clusterlib.get_rand_str(4)\n        temp_template = f\"{helpers.get_func_name()}_{rand_str}\"\n    \n        pool_name = f\"pool_{rand_str}\"\n        pool_metadata = {\n            \"name\": pool_name,\n            \"description\": \"Shelley QA E2E test Test\",\n            \"ticker\": \"QA1\",\n            \"homepage\": \"www.test1.com\",\n        }\n        pool_metadata_file = helpers.write_json(\n            temp_dir / f\"{pool_name}_registration_metadata.json\", pool_metadata\n        )\n    \n        pool_data = clusterlib.PoolData(\n            pool_name=pool_name,\n            pool_pledge=222,\n            pool_cost=123,\n            pool_margin=0.512,\n            pool_metadata_url=\"https://www.where_metadata_file_is_located.com\",\n            pool_metadata_hash=cluster.gen_pool_metadata_hash(pool_metadata_file),\n        )\n    \n        # create pool owners\n        pool_owners = clusterlib_utils.create_pool_users(\n            cluster_obj=cluster, name_template=temp_template\n        )\n    \n        # fund source address\n        clusterlib_utils.fund_from_faucet(\n            pool_owners[0].payment,\n            cluster_obj=cluster,\n            faucet_data=cluster_manager.cache.addrs_data[\"user1\"],\n            amount=1_500_000_000,\n        )\n    \n        # register pool and delegate stake address\n        pool_creation_out = _create_register_pool_delegate_stake_tx(\n            cluster_obj=cluster,\n            pool_owners=pool_owners,\n            temp_template=temp_template,\n            pool_data=pool_data,\n        )\n    \n        # deregister stake pool\n        cluster.deregister_stake_pool(\n            pool_owners=pool_owners,\n            cold_key_pair=pool_creation_out.cold_key_pair,\n            epoch=cluster.get_last_block_epoch() + 1,\n            pool_name=pool_data.pool_name,\n            tx_name=temp_template,\n        )\n    \n        LOGGER.info(\"Waiting up to 3 epochs for stake pool to be deregistered.\")\n        stake_pool_id_dec = helpers.decode_bech32(pool_creation_out.stake_pool_id)\n        helpers.wait_for(\n            lambda: cluster.get_registered_stake_pools_ledger_state().get(stake_pool_id_dec)\n            is None,\n            delay=10,\n            num_sec=3 * cluster.epoch_length_sec,\n            message=\"deregister stake pool\",\n        )\n    \n        # check that the stake addresses are no longer delegated\n        for owner_rec in pool_owners:\n            stake_addr_info = cluster.get_stake_addr_info(owner_rec.stake.address)\n            assert (\n                not stake_addr_info.delegation\n            ), f\"Stake address is still delegated: {stake_addr_info}\"\n    \n        src_address = pool_owners[0].payment.address\n        src_init_balance = cluster.get_address_balance(src_address)\n    \n        # reregister the pool by resubmitting the pool registration certificate,\n        # delegate stake address to pool again (the address is already registered)\n        tx_files = clusterlib.TxFiles(\n            certificate_files=[\n                pool_creation_out.pool_reg_cert_file,\n                *list(temp_dir.glob(f\"*{temp_template}_stake_deleg.cert\")),\n            ],\n            signing_key_files=pool_creation_out.tx_raw_output.tx_files.signing_key_files,\n        )\n        tx_raw_output = cluster.send_tx(\n            src_address=src_address, tx_name=temp_template, tx_files=tx_files\n        )\n        cluster.wait_for_new_block(new_blocks=2)\n    \n        # check that the balance for source address was correctly updated\n        assert (\n            cluster.get_address_balance(src_address)\n            == src_init_balance - tx_raw_output.fee - cluster.get_pool_deposit()\n        ), f\"Incorrect balance for source address `{src_address}`\"\n    \n        LOGGER.info(\"Waiting up to 5 epochs for stake pool to be re-registered.\")\n>       helpers.wait_for(\n            lambda: pool_creation_out.stake_pool_id in cluster.get_stake_distribution(),\n            delay=10,\n            num_sec=5 * cluster.epoch_length_sec,\n            message=\"reregister stake pool\",\n        )\n\n/home/martink/Source/repos/cardano-node-tests/cardano_node_tests/tests/test_pools.py:676: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc = <function TestStakePool.test_reregister_stake_pool.<locals>.<lambda> at 0x7f2b73767a60>, delay = 10\nnum_sec = 1000.0, message = 'reregister stake pool', silent = False\n\n    def wait_for(\n        func: Callable, delay: int = 5, num_sec: int = 180, message: str = \"\", silent: bool = False\n    ) -> Any:\n        \"\"\"Wait for success of `func` for `num_sec`.\"\"\"\n        end_time = time.time() + num_sec\n    \n        while time.time() < end_time:\n            response = func()\n            if response:\n                return response\n            time.sleep(delay)\n    \n        if not silent:\n>           raise AssertionError(f\"Failed to {message or 'finish'} in time.\")\nE           AssertionError: Failed to reregister stake pool in time.\n\n/home/martink/Source/repos/cardano-node-tests/cardano_node_tests/utils/helpers.py:117: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1602007054888,
      "stop" : 1602007054888,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1601992552862,
      "stop" : 1601992552862,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "temp_dir",
    "time" : {
      "start" : 1602007054887,
      "stop" : 1602007054888,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1601992552866,
      "stop" : 1601992552866,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster",
    "time" : {
      "start" : 1602007054888,
      "stop" : 1602007054889,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1601992552860,
      "stop" : 1601992552861,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_cleanup",
    "time" : {
      "start" : 1601992552863,
      "stop" : 1601992552865,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1601992552856,
      "stop" : 1601992552859,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Reregister stake pool.",
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed to reregister stake pool in time.",
    "statusTrace" : "self = <cardano_node_tests.tests.test_pools.TestStakePool object at 0x7f2b73769040>\ncluster_manager = <cardano_node_tests.utils.parallel_run.ClusterManager object at 0x7f2b736fee20>\ncluster = <cardano_node_tests.utils.clusterlib.ClusterLib object at 0x7f2b737401f0>\ntemp_dir = PosixPath('/home/martink/toolbox_tmp/pytest-of-martink/pytest-12/popen-gw4/test_pools_py0')\n\n    @allure.link(helpers.get_vcs_link())\n    def test_reregister_stake_pool(\n        self,\n        cluster_manager: parallel_run.ClusterManager,\n        cluster: clusterlib.ClusterLib,\n        temp_dir: Path,\n    ):\n        \"\"\"Reregister stake pool.\"\"\"\n        rand_str = clusterlib.get_rand_str(4)\n        temp_template = f\"{helpers.get_func_name()}_{rand_str}\"\n    \n        pool_name = f\"pool_{rand_str}\"\n        pool_metadata = {\n            \"name\": pool_name,\n            \"description\": \"Shelley QA E2E test Test\",\n            \"ticker\": \"QA1\",\n            \"homepage\": \"www.test1.com\",\n        }\n        pool_metadata_file = helpers.write_json(\n            temp_dir / f\"{pool_name}_registration_metadata.json\", pool_metadata\n        )\n    \n        pool_data = clusterlib.PoolData(\n            pool_name=pool_name,\n            pool_pledge=222,\n            pool_cost=123,\n            pool_margin=0.512,\n            pool_metadata_url=\"https://www.where_metadata_file_is_located.com\",\n            pool_metadata_hash=cluster.gen_pool_metadata_hash(pool_metadata_file),\n        )\n    \n        # create pool owners\n        pool_owners = clusterlib_utils.create_pool_users(\n            cluster_obj=cluster, name_template=temp_template\n        )\n    \n        # fund source address\n        clusterlib_utils.fund_from_faucet(\n            pool_owners[0].payment,\n            cluster_obj=cluster,\n            faucet_data=cluster_manager.cache.addrs_data[\"user1\"],\n            amount=1_500_000_000,\n        )\n    \n        # register pool and delegate stake address\n        pool_creation_out = _create_register_pool_delegate_stake_tx(\n            cluster_obj=cluster,\n            pool_owners=pool_owners,\n            temp_template=temp_template,\n            pool_data=pool_data,\n        )\n    \n        # deregister stake pool\n        cluster.deregister_stake_pool(\n            pool_owners=pool_owners,\n            cold_key_pair=pool_creation_out.cold_key_pair,\n            epoch=cluster.get_last_block_epoch() + 1,\n            pool_name=pool_data.pool_name,\n            tx_name=temp_template,\n        )\n    \n        LOGGER.info(\"Waiting up to 3 epochs for stake pool to be deregistered.\")\n        stake_pool_id_dec = helpers.decode_bech32(pool_creation_out.stake_pool_id)\n        helpers.wait_for(\n            lambda: cluster.get_registered_stake_pools_ledger_state().get(stake_pool_id_dec)\n            is None,\n            delay=10,\n            num_sec=3 * cluster.epoch_length_sec,\n            message=\"deregister stake pool\",\n        )\n    \n        # check that the stake addresses are no longer delegated\n        for owner_rec in pool_owners:\n            stake_addr_info = cluster.get_stake_addr_info(owner_rec.stake.address)\n            assert (\n                not stake_addr_info.delegation\n            ), f\"Stake address is still delegated: {stake_addr_info}\"\n    \n        src_address = pool_owners[0].payment.address\n        src_init_balance = cluster.get_address_balance(src_address)\n    \n        # reregister the pool by resubmitting the pool registration certificate,\n        # delegate stake address to pool again (the address is already registered)\n        tx_files = clusterlib.TxFiles(\n            certificate_files=[\n                pool_creation_out.pool_reg_cert_file,\n                *list(temp_dir.glob(f\"*{temp_template}_stake_deleg.cert\")),\n            ],\n            signing_key_files=pool_creation_out.tx_raw_output.tx_files.signing_key_files,\n        )\n        tx_raw_output = cluster.send_tx(\n            src_address=src_address, tx_name=temp_template, tx_files=tx_files\n        )\n        cluster.wait_for_new_block(new_blocks=2)\n    \n        # check that the balance for source address was correctly updated\n        assert (\n            cluster.get_address_balance(src_address)\n            == src_init_balance - tx_raw_output.fee - cluster.get_pool_deposit()\n        ), f\"Incorrect balance for source address `{src_address}`\"\n    \n        LOGGER.info(\"Waiting up to 5 epochs for stake pool to be re-registered.\")\n>       helpers.wait_for(\n            lambda: pool_creation_out.stake_pool_id in cluster.get_stake_distribution(),\n            delay=10,\n            num_sec=5 * cluster.epoch_length_sec,\n            message=\"reregister stake pool\",\n        )\n\n/home/martink/Source/repos/cardano-node-tests/cardano_node_tests/tests/test_pools.py:676: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc = <function TestStakePool.test_reregister_stake_pool.<locals>.<lambda> at 0x7f2b73767a60>, delay = 10\nnum_sec = 1000.0, message = 'reregister stake pool', silent = False\n\n    def wait_for(\n        func: Callable, delay: int = 5, num_sec: int = 180, message: str = \"\", silent: bool = False\n    ) -> Any:\n        \"\"\"Wait for success of `func` for `num_sec`.\"\"\"\n        end_time = time.time() + num_sec\n    \n        while time.time() < end_time:\n            response = func()\n            if response:\n                return response\n            time.sleep(delay)\n    \n        if not silent:\n>           raise AssertionError(f\"Failed to {message or 'finish'} in time.\")\nE           AssertionError: Failed to reregister stake pool in time.\n\n/home/martink/Source/repos/cardano-node-tests/cardano_node_tests/utils/helpers.py:117: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b39e63bc11e4fd9b",
      "name" : "log",
      "source" : "b39e63bc11e4fd9b.txt",
      "type" : "text/plain",
      "size" : 361
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1602008246125,
      "stop" : 1602008246125,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "temp_dir::0",
    "time" : {
      "start" : 1602008250586,
      "stop" : 1602008250586,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_cleanup::0",
    "time" : {
      "start" : 1602008250587,
      "stop" : 1602008250587,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('temp_dir')"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_pools"
  }, {
    "name" : "subSuite",
    "value" : "TestStakePool"
  }, {
    "name" : "host",
    "value" : "toolbox"
  }, {
    "name" : "thread",
    "value" : "347076-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_pools"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/43bac3543b7d7cb6fbb89738b68cbc7890cd2d2d/cardano_node_tests/tests/test_pools.py#L575",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/43bac3543b7d7cb6fbb89738b68cbc7890cd2d2d/cardano_node_tests/tests/test_pools.py#L575",
    "type" : "link"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('temp_dir')" ]
  },
  "source" : "58af86ea962180aa.json",
  "parameterValues" : [ ]
}